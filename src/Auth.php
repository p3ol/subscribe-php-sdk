<?php

namespace Poool\Subscribe\SDK;

class Auth
{
    private Client $client;

    /**
     * @param Client $client - SDK client
     *
     * <code>
     * $auth = new Auth($client);
     * </code>
     */
    public function __construct($client)
    {
        $this->client = $client;
    }

    /**
     * Step 1 of the JSAT (JSON Security Assertion Token) auth flow.
     * This flow requires the creation of a callbackId from the provider that
     * will be used by the consumer to redirect the user once it's signed in on
     * both sides. Thus, the provider can also become a consumer if the consumer
     * implements the same flow in the opposite way.
     *
     * The callbackId can be granted using two methods:
     * - "bearer": This uses the "Authorization" header to recognize an already
     * authenticated user and automatically attach the callback ownership to it
     * - "password": This first signs the user then attach the callback ownership
     *
     * Both methods require a redirectUri for the consumer to be able to redirect
     * the user once it's signed in on both sides.
     * @param string $grantType Grant type (password, bearer)
     * @param string $redirectUri Redirect URI
     * @param string $username (optional) Username for password grant type
     * @param string $password (optional) Password for password grant type
     * @param mixed[] $options (optional) Guzzle request options
     * @return mixed[] Returns generated auth tokens
     *
     * <code>
     * $auth->createCallback('bearer', 'https://example.com/callback');
     * $auth->createCallback('bearer', 'https://example.com/callback', 'test@test.com', 'password123');
     * </code>
     */
    public function createCallback($grantType, $redirectUri, $username = null, $password = null, $options = [])
    {
        $json = [
            'grantType' => $grantType,
            'redirectUri' => $redirectUri,
        ];

        if ($grantType === 'password') {
            $json['username'] = $username;
            $json['password'] = $password;
        }

        $callback = $this->client->request(array_merge($options, [
            'method' => 'POST',
            'resource' => '/subscribe/auth/callback',
            'json' => $json,
        ]));

        return $callback;
    }

    /**
     * Step 2 of JSAT: Verify the previously created callback
     * @param string $callbackId Callback ID generated by $auth->createCallback
     * @param mixed[] $options (optional) Guzzle request options
     * @return mixed[] Returns generated auth tokens
     *
     * <code>
     * $auth->verifyCallback('callback-id');
     * </code>
     */
    public function verifyCallback($callbackId, $options = [])
    {
        $callback = $this->client->request(array_merge($options, [
            'method' => 'POST',
            'resource' => '/subscribe/auth/token',
            'json' => [
                'grantType' => 'callback',
                'callbackId' => $callbackId,
            ],
        ]));

        if (isset($callback['accessToken'])) {
            $this->accessToken = $callback['accessToken'];
            $this->refreshToken = $callback['refreshToken'];
        }

        return $callback;
    }
}
