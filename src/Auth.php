<?php

namespace Poool\Subscribe\SDK;

class Auth
{
    private $client;
    public $accessToken;
    public $refreshToken;

    /**
     * @param Client $client - SDK client
     *
     * @example
     * <code>
     * $auth = new Auth($client);
     * </code>
     */
    public function __construct($client, $options = [])
    {
        $this->client = $client;

        if (isset($options['accessToken'])) {
            $this->accessToken = $options['accessToken'];
        }

        if (isset($options['refreshToken'])) {
            $this->refreshToken = $options['refreshToken'];
        }
    }

    /**
     * @param string $username - Customer username
     * @param string $password - Customer password
     * @param array[mixed] $options (optional) Guzzle request options
     * @return array[mixed] Returns generated auth tokens
     *
     * @example
     * <code>
     * $auth->signin('username@email.com', 'password123');
     * </code>
     */
    public function signin($username, $password, $options = [])
    {
        $tokens = $this->client->request(array_merge($options, [
            'method' => 'POST',
            'resource' => '/subscribe/auth/token',
            'json' => [
                'grantType' => 'password',
                'username' => $username,
                'password' => $password,
            ],
        ]));

        if (isset($tokens['accessToken'])) {
            $this->accessToken = $tokens['accessToken'];
            $this->refreshToken = $tokens['refreshToken'];
        }

        return $tokens;
    }

    /**
     * @param string $grantType Grant type (password, bearer)
     * @param string $redirectUri Redirect URI
     * @param string $username (optional) Username for password grant type
     * @param string $password (optional) Password for password grant type
     * @param array[mixed] $options (optional) Guzzle request options
     * @return array[mixed] Returns generated auth tokens
     *
     * @example
     * <code>
     * $auth->createCallback('bearer', 'https://example.com/callback']);
     * $auth->createCallback('bearer', 'https://example.com/callback', 'test@test.com', 'password123');
     * </code>
     */
    public function createCallback($grantType, $redirectUri, $username, $password, $options = [])
    {
        $json = [
            'grantType' => $grantType,
            'redirectUri' => $redirectUri,
        ];

        if ($grantType === 'password') {
            $json['username'] = $username;
            $json['password'] = $password;
        }

        $callback = $this->client->request(array_merge($options, [
            'method' => 'POST',
            'resource' => '/subscribe/auth/callback',
            'json' => $json,
        ]));

        return $callback;
    }

    /**
     * @param string $callbackId Callback ID generated by $auth->createCallback
     * @param array[mixed] $options (optional) Guzzle request options
     * @return array[mixed] Returns generated auth tokens
     *
     * @example
     * <code>
     * $auth->verifyCallback('callback-id');
     * </code>
     */
    public function verifyCallback($callbackId, $options = [])
    {
        $callback = $this->client->request(array_merge($options, [
            'method' => 'POST',
            'resource' => '/subscribe/auth/token',
            'json' => [
                'grantType' => 'callback',
                'callbackId' => $callbackId,
            ],
        ]));

        return $callback;
    }

    /**
     * @param array[mixed] $options (optional) Guzzle request options
     * @return array[mixed] Returns infos on the current authenticated user
     *
     * @example
     * <code>
     * $auth->me();
     * </code>
     */
    public function me($options = [])
    {
        $result = $this->client->requestWithRetry(array_merge($options, [
            'method' => 'GET',
            'resource' => '/subscribe/auth/me',
        ]));

        return $result;
    }
}
